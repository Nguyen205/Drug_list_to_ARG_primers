# -*- coding: utf-8 -*-
"""
Created on Wed Sep 18 15:33:06 2024

@author: 67535
"""

import vcf
import pandas as pd
import argparse

parser = argparse.ArgumentParser(description='Use the VCF file generated by FreeBayes to screen primers with perfect matches with the ARGs in the given sample.')

parser.add_argument('-o', '--output', required = False,
                    help='Output fasta file path and name. Default: ./output/screened_primers_probes.xlsx',default='./output/screened_primers_probes.xlsx')
parser.add_argument('-v', '--vcf',required = True,
                    help='Input vcf file path generated by FreeBayes for the ARG mutations detected in the given sample.')
parser.add_argument('-f', '--fasta', required = True,
                    help='The fasta file generated by "ARG_screening.py".')
parser.add_argument('-p', '--primer',required = True,
                    help='The designed primers and probes generated by "primer3_outputs_to_xlsx.py".')
args = parser.parse_args()

#Read and process VCF file from FreeBayes
#################################################################################################################
vcf_reader = vcf.Reader(filename=args.vcf)
#################################################################################################################
variant_table=pd.DataFrame(columns=['ARO','POS','REF','ALT','QUAL','DP'])

for record in vcf_reader:  
    if record.QUAL >=20:
        variant_record=pd.DataFrame(columns=['ARO','POS','REF','ALT','QUAL','DP'],data=[[record.CHROM,record.POS,record.REF,record.ALT,record.QUAL,record.INFO['DP']]])
        variant_table=pd.concat([variant_table,variant_record],ignore_index=True)
        
#Read the reference fasta for primer and probe design
##############################################################################################
file=open(args.fasta)
##############################################################################################
ref_fasta=file.readlines()
file.close()

ref_table=pd.DataFrame(columns=['ARO','SEQ'])
for i in range(0,len(ref_fasta),2):
    ref_record=pd.DataFrame(columns=['ARO','SEQ'],data=[[ref_fasta[i].split('_')[0].strip('>\n'),ref_fasta[i+1].strip('\n')]])
    ref_table=pd.concat([ref_table,ref_record],ignore_index=True)

#Read and process IDT primer set output: get the regions that the primers and probes covered
###################################################################################################################
raw_primers=pd.read_excel(args.primer)
###################################################################################################################
primer_sites=pd.DataFrame(columns=['ARO','AssaySet','Forward','Reverse','Probe','Sites'])
for i in range(0,len(raw_primers),4):
    ARO=raw_primers.loc[i,'AssaySet'].split('(')[1].split(')')[0]
    sites=list(range(int(raw_primers.loc[i,'Start']),int(raw_primers.loc[i,'Start'])+int(raw_primers.loc[i,'Length'])))
    sites=sites+list(range(int(raw_primers.loc[i+2,'Start'])-int(raw_primers.loc[i+2,'Length'])+1,int(raw_primers.loc[i+2,'Start'])+1))
    
    print(i)
    
    if raw_primers.loc[i+1,'Sequence']==str(list(ref_table[ref_table['ARO']==ARO]['SEQ'])).strip("[']")[int(raw_primers.loc[i+1,'Start'])-1:int(raw_primers.loc[i+1,'Start'])+int(raw_primers.loc[i+1,'Length'])-1]:
        sites=sites+list(range(int(raw_primers.loc[i+1,'Start']),int(raw_primers.loc[i+1,'Start'])+int(raw_primers.loc[i+1,'Length'])))
    else:
        sites=sites+list(range(int(raw_primers.loc[i+1,'Start'])-int(raw_primers.loc[i+1,'Length'])+1,int(raw_primers.loc[i+1,'Start'])+1))
    
    primer_sites_temp=pd.DataFrame(columns=['ARO','AssaySet','Forward','Reverse','Probe','Sites','ProductLength','F_start','R_start','P_start','F_Length','R_Length','P_Length','F_Tm','R_Tm','P_Tm','F_GC','R_GC','P_GC'],data=[[raw_primers.loc[i,'AssaySet'].split('(')[1].split(')')[0], raw_primers.loc[i,'AssaySet'].split('Set ')[1].split(' (')[0], raw_primers.loc[i,'Sequence'], raw_primers.loc[i+2,'Sequence'],raw_primers.loc[i+1,'Sequence'],sites,raw_primers.loc[i+3,'Amplicon'], raw_primers.loc[i,'Start'], raw_primers.loc[i+2,'Start'],raw_primers.loc[i+1,'Start'], raw_primers.loc[i,'Length'], raw_primers.loc[i+2,'Length'],raw_primers.loc[i+1,'Length'], raw_primers.loc[i,'Tm'], raw_primers.loc[i+2,'Tm'],raw_primers.loc[i+1,'Tm'], raw_primers.loc[i,'GC Percent'], raw_primers.loc[i+2,'GC Percent'],raw_primers.loc[i+1,'GC Percent']]])
    primer_sites=pd.concat([primer_sites,primer_sites_temp],ignore_index=True)
    
#According to AROs in ref_fasta, find out the mutated regions

output_df=pd.DataFrame(columns=['ARO','AssaySet','Forward','Reverse','Probe','Length'])
for i in range(0,len(ref_table)):
    pos_list=list(variant_table[variant_table['ARO']==ref_table.loc[i,'ARO']]['POS'])
    ref_list=list(variant_table[variant_table['ARO']==ref_table.loc[i,'ARO']]['REF'])
    ref_len_list=[]
    for j in range(0,len(ref_list)):
        ref_len_list.append(len(ref_list[j]))
    for j in range(0,len(ref_len_list)):
        if ref_len_list[j]!=1:
            pos_list=pos_list+list(range(pos_list[j]+1,pos_list[j]+ref_len_list[j]))
    pos_list=list(sorted(list(set(pos_list))))
    for j in range(0,len(primer_sites)):
        if primer_sites.loc[j,'ARO'].split('_')[0]==ref_table.loc[i,'ARO']:
            inter_list=list(set(pos_list).intersection(set(primer_sites.loc[j,'Sites'])))
            if inter_list==[]:
                output_temp=pd.DataFrame(columns=['ARO','AssaySet','Forward','Reverse','Probe','Length','F_start','R_start','P_start','F_Length','R_Length','P_Length','F_Tm','R_Tm','P_Tm','F_GC','R_GC','P_GC'],data=[[primer_sites.loc[j,'ARO'],primer_sites.loc[j,'AssaySet'],primer_sites.loc[j,'Forward'],primer_sites.loc[j,'Reverse'],primer_sites.loc[j,'Probe'],primer_sites.loc[j,'ProductLength'],primer_sites.loc[j,'F_start'],primer_sites.loc[j,'R_start'],primer_sites.loc[j,'P_start'],primer_sites.loc[j,'F_Length'],primer_sites.loc[j,'R_Length'],primer_sites.loc[j,'P_Length'],primer_sites.loc[j,'F_Tm'],primer_sites.loc[j,'R_Tm'],primer_sites.loc[j,'P_Tm'],primer_sites.loc[j,'F_GC'],primer_sites.loc[j,'R_GC'],primer_sites.loc[j,'P_GC']]])
                output_df=pd.concat([output_df,output_temp],ignore_index=True)

output_print=pd.DataFrame(columns=['AssaySet','Type','Sequence','Start','Length','Tm','GC Percent','Amplicon'])
for i in range(0,len(output_df)):
    print_temp=pd.DataFrame(columns=output_print.columns)
    print_temp['AssaySet']=['Batch Item ('+output_df.loc[i,'ARO']+'), Assay Set '+output_df.loc[i,'AssaySet'],'Batch Item ('+output_df.loc[i,'ARO']+'), Assay Set '+output_df.loc[i,'AssaySet'],'Batch Item ('+output_df.loc[i,'ARO']+'), Assay Set '+output_df.loc[i,'AssaySet'],'Batch Item ('+output_df.loc[i,'ARO']+'), Assay Set '+output_df.loc[i,'AssaySet']]
    print_temp['Type']=['Forward Primer','Probe','Reverse Primer','Product']
    print_temp.loc[0,'Sequence']=output_df.loc[i,'Forward']
    print_temp.loc[1,'Sequence']=output_df.loc[i,'Probe']
    print_temp.loc[2,'Sequence']=output_df.loc[i,'Reverse']
    print_temp.loc[0,'Start']=output_df.loc[i,'F_start']
    print_temp.loc[1,'Start']=output_df.loc[i,'P_start']
    print_temp.loc[2,'Start']=output_df.loc[i,'R_start']
    print_temp.loc[0,'Length']=output_df.loc[i,'F_Length']
    print_temp.loc[1,'Length']=output_df.loc[i,'P_Length']
    print_temp.loc[2,'Length']=output_df.loc[i,'R_Length']
    print_temp.loc[0,'Tm']=output_df.loc[i,'F_Tm']
    print_temp.loc[1,'Tm']=output_df.loc[i,'P_Tm']
    print_temp.loc[2,'Tm']=output_df.loc[i,'R_Tm']
    print_temp.loc[0,'GC Percent']=output_df.loc[i,'F_GC']
    print_temp.loc[1,'GC Percent']=output_df.loc[i,'P_GC']
    print_temp.loc[2,'GC Percent']=output_df.loc[i,'R_GC']
    print_temp.loc[3,'Amplicon']=output_df.loc[i,'Length']
    output_print=output_print.append(print_temp,ignore_index=True)
#Write output
################################################################################################################
output_print.to_excel(args.output,index=None)
################################################################################################################
